private Bitmap ConvertTo1bpp(Bitmap original)
{
    int width = original.Width;
    int height = original.Height;
    Bitmap binarizedBitmap = new Bitmap(width, height, PixelFormat.Format1bppIndexed);

    BitmapData data = binarizedBitmap.LockBits(new Rectangle(0, 0, width, height), 
                        ImageLockMode.WriteOnly, PixelFormat.Format1bppIndexed);
    BitmapData originalData = original.LockBits(new Rectangle(0, 0, width, height), 
                        ImageLockMode.ReadOnly, original.PixelFormat);

    try
    {
        int bytesPerPixel = Image.GetPixelFormatSize(original.PixelFormat) / 8;
        int stride = originalData.Stride;
        int newStride = data.Stride;

        unsafe
        {
            byte* newRow = (byte*)data.Scan0;
            byte* originalRow = (byte*)originalData.Scan0;

            for (int y = 0; y < height; y++)
            {
                byte pixelByte = 0;
                int bitIndex = 7;

                for (int x = 0; x < width; x++)
                {
                    Color pixel = Color.FromArgb(
                        originalRow[x * bytesPerPixel], 
                        originalRow[x * bytesPerPixel + 1], 
                        originalRow[x * bytesPerPixel + 2]);

                    int grayValue = (int)(0.299 * pixel.R + 0.587 * pixel.G + 0.114 * pixel.B);
                    bool isBlack = grayValue < 128; // ðŸ”¥ Definir si el pÃ­xel es negro o blanco

                    if (isBlack)
                    {
                        pixelByte |= (byte)(1 << bitIndex);
                    }

                    bitIndex--;

                    if (bitIndex < 0 || x == width - 1)
                    {
                        newRow[x / 8] = pixelByte;
                        pixelByte = 0;
                        bitIndex = 7;
                    }
                }

                newRow += newStride;
                originalRow += stride;
            }
        }
    }
    finally
    {
        binarizedBitmap.UnlockBits(data);
        original.UnlockBits(originalData);
    }

    return binarizedBitmap;
}
