document.getElementById("fileInput").addEventListener("change", function(event) {
    const file = event.target.files[0];
    if (!file) return;

    // ðŸ”¥ Leer el tipo de archivo para verificar si es BMP
    const fileType = file.type;

    // ðŸ”¥ Crear un objeto FormData y agregar la imagen
    const formData = new FormData();

    if (fileType === "image/bmp") {
        console.log("Imagen BMP detectada, enviÃ¡ndola sin cambios...");
        formData.append("image", file, file.name); // Enviar BMP sin conversiÃ³n
    } else {
        console.log("Imagen no es BMP, convirtiÃ©ndola antes de enviarla...");
        
        // Convertir la imagen a BMP antes de enviarla
        const reader = new FileReader();
        reader.onload = function(e) {
            const img = new Image();
            img.onload = function() {
                const canvas = document.createElement("canvas");
                const ctx = canvas.getContext("2d");

                canvas.width = img.width;
                canvas.height = img.height;

                ctx.drawImage(img, 0, 0);

                // ðŸ”¥ Convertir a BMP antes de enviar
                canvas.toBlob(blob => {
                    formData.append("image", blob, "converted.bmp"); // Enviar como BMP
                    enviarImagen(formData);
                }, "image/bmp");
            };
            img.src = e.target.result;
        };
        reader.readAsDataURL(file);
    }

    // Si la imagen ya es BMP, enviarla directamente
    if (fileType === "image/bmp") {
        enviarImagen(formData);
    }
});

// ðŸ”¥ FunciÃ³n para enviar la imagen al backend
function enviarImagen(formData) {
    fetch("/Imagen/Guardar", { // AsegÃºrate de que la URL coincida con tu controlador
        method: "POST",
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        console.log("Imagen guardada con Ã©xito", data);
    })
    .catch(error => console.error("Error al enviar la imagen", error));
}




