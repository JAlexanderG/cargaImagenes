private byte[] EnsureMaxSize(Bitmap image, int maxDataSize, int maxFileSize)
{
    int width = image.Width;
    int height = image.Height;
    const int bmpHeaderSize = 54;

    while (true)
    {
        using (var ms = new MemoryStream())
        {
            image.Save(ms, ImageFormat.Bmp);
            byte[] imageData = ms.ToArray();
            int dataSize = imageData.Length - bmpHeaderSize;

            // ✅ Si la imagen ya cumple con los límites, la retornamos
            if (imageData.Length <= maxFileSize && dataSize <= maxDataSize)
                return imageData;
        }

        // 🚨 Evitamos reducir demasiado la imagen
        if (width < 100 || height < 100)
        {
            Console.WriteLine("⚠️ La imagen no puede reducirse más sin perder contenido.");
            break;
        }

        // 🔥 Reducimos la imagen con un mejor algoritmo (Bicubic Interpolation)
        width = (int)(width * 0.90);
        height = (int)(height * 0.90);

        using (var resizedImage = new Bitmap(width, height))
        using (Graphics g = Graphics.FromImage(resizedImage))
        {
            g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
            g.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;
            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
            g.DrawImage(image, 0, 0, width, height);

            image = (Bitmap)resizedImage.Clone();
        }
    }

    // 🔥 Suavizar bordes antes de devolver la imagen final
    using (var smoothedImage = SmoothEdges(image))
    using (var ms = new MemoryStream())
    {
        smoothedImage.Save(ms, ImageFormat.Bmp);
        return ms.ToArray();
    }
}

// **🔥 Suavizar bordes para mejorar calidad en la web**
private Bitmap SmoothEdges(Bitmap image)
{
    Bitmap smoothed = new Bitmap(image.Width, image.Height);
    using (Graphics g = Graphics.FromImage(smoothed))
    {
        g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
        g.DrawImage(image, new Rectangle(0, 0, image.Width, image.Height));
    }
    return smoothed;
}