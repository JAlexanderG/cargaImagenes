public byte[] ProcessImage(IFormFile file)
{
    using (var inputStream = file.OpenReadStream())
    using (var originalImage = new Bitmap(inputStream))
    {
        // üî• 1. Convertimos a escala de grises con m√°s precisi√≥n
        using (var grayscaleImage = ConvertToGrayscale(originalImage))
        {
            // üî• 2. Aplicamos umbral adaptativo para mejorar trazos
            using (var enhancedImage = AdaptiveThreshold(grayscaleImage))
            {
                // üî• 3. Reducci√≥n de tama√±o m√°s suave
                byte[] finalImage = EnsureMaxSize(enhancedImage, 2048, 15 * 1024);
                return finalImage;
            }
        }
    }
}

// **1Ô∏è‚É£ Convertir a escala de grises con m√°s precisi√≥n**
private Bitmap ConvertToGrayscale(Bitmap original)
{
    Bitmap grayscale = new Bitmap(original.Width, original.Height);
    using (Graphics g = Graphics.FromImage(grayscale))
    {
        ColorMatrix colorMatrix = new ColorMatrix(new float[][] {
            new float[] {0.3f, 0.3f, 0.3f, 0, 0},
            new float[] {0.59f, 0.59f, 0.59f, 0, 0},
            new float[] {0.11f, 0.11f, 0.11f, 0, 0},
            new float[] {0, 0, 0, 1, 0},
            new float[] {0, 0, 0, 0, 1}
        });

        ImageAttributes attributes = new ImageAttributes();
        attributes.SetColorMatrix(colorMatrix);
        g.DrawImage(original, new Rectangle(0, 0, original.Width, original.Height),
            0, 0, original.Width, original.Height, GraphicsUnit.Pixel, attributes);
    }
    return grayscale;
}

// **2Ô∏è‚É£ Aplicar Umbral Adaptativo (mejor presencia de negro)**
private Bitmap AdaptiveThreshold(Bitmap grayscaleImage)
{
    Bitmap enhanced = new Bitmap(grayscaleImage.Width, grayscaleImage.Height);
    for (int y = 0; y < grayscaleImage.Height; y++)
    {
        for (int x = 0; x < grayscaleImage.Width; x++)
        {
            Color pixel = grayscaleImage.GetPixel(x, y);
            int intensity = pixel.R; // Escala de grises

            // üî• Umbral din√°mico: reforzamos lo oscuro sin eliminar grises claros
            if (intensity < 120)
            {
                enhanced.SetPixel(x, y, Color.Black);
            }
            else if (intensity > 200)
            {
                enhanced.SetPixel(x, y, Color.White);
            }
            else
            {
                int adjust = (intensity - 120) * 2;
                int newGray = Math.Max(0, Math.Min(255, adjust));
                enhanced.SetPixel(x, y, Color.FromArgb(newGray, newGray, newGray));
            }
        }
    }
    return enhanced;
}

// **3Ô∏è‚É£ Reducci√≥n de tama√±o m√°s suave**
private byte[] EnsureMaxSize(Bitmap image, int maxDataSize, int maxFileSize)
{
    int width = image.Width;
    int height = image.Height;

    while (true)
    {
        using (var ms = new MemoryStream())
        {
            image.Save(ms, ImageFormat.Bmp);
            byte[] imageData = ms.ToArray();

            if (imageData.Length <= maxFileSize)
            {
                int bmpHeaderSize = 54;
                int dataSize = imageData.Length - bmpHeaderSize;

                if (dataSize <= maxDataSize)
                {
                    return imageData;
                }
            }

            // üî• Reducci√≥n m√°s suave: 5% por paso
            width = (int)(width * 0.95);
            height = (int)(height * 0.95);

            if (width < 50 || height < 50) // No reducir demasiado
                throw new Exception("No se puede reducir m√°s la imagen sin perder contenido.");

            using (var resizedImage = new Bitmap(image, new Size(width, height)))
            {
                image = (Bitmap)resizedImage.Clone();
            }
        }
    }
}
