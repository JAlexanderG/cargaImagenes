static byte[] TransformImageData(byte[] rawData)
{
    using (MemoryStream output = new MemoryStream())
    {
        // ðŸ”¹ Mantener el encabezado BMP intacto (primeros 54 bytes)
        output.Write(rawData, 0, 54);

        // ðŸ”¹ Remover los bytes intercalados `00` solo en los datos de la imagen
        for (int i = 54; i < rawData.Length - 1; i += 2)
        {
            if (!(rawData[i] == 0x00 && rawData[i + 1] == 0x00)) // Solo si es un doble `00`
            {
                output.WriteByte(rawData[i]);
            }
        }

        byte[] resultado = output.ToArray();

        // ðŸ“Œ Corregir el tamaÃ±o final si es necesario
        if (resultado.Length < 2404)
        {
            Array.Resize(ref resultado, 2404);
        }

        return resultado;
    }
}


static byte[] FixBMPHeader(byte[] bmpData)
{
    // ðŸ“Œ PosiciÃ³n 18 (0x12) en el BMP: Ancho de la imagen (DeberÃ­a ser 140 pÃ­xeles)
    bmpData[18] = 0x8C; // 140 en decimal
    bmpData[19] = 0x00;
    bmpData[20] = 0x00;
    bmpData[21] = 0x00;

    return bmpData;
}

byte[] imagenCorregida = TransformImageData(imagenBytes);
imagenCorregida = FixBMPHeader(imagenCorregida);
File.WriteAllBytes("C:\\Temp\\imagen_corregida.bmp", imagenCorregida);
